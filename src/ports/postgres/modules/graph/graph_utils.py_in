# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Graph Methods

# Please refer to the graph.sql_in file for the documentation

"""
@file graph.py_in

@namespace graph
"""

from utilities.utilities import _assert, add_postfix
from utilities.validate_args import get_cols
from utilities.validate_args import unquote_ident
from utilities.validate_args import table_exists
from utilities.validate_args import columns_exist_in_table
from utilities.validate_args import table_is_empty


def _grp_null_checks(grp_list):
    """
    Helper function for generating NULL checks for grouping columns
    to be used within a WHERE clause
    Args:
        @param grp_list   The list of grouping columns
    """
    return ' AND '.join([" {i} IS NOT NULL ".format(**locals())
                         for i in grp_list])


def _check_groups(tbl1, tbl2, grp_list):
    """
    Helper function for joining tables with groups.
    Args:
            @param tbl1       Name of the first table
            @param tbl2       Name of the second table
            @param grp_list   The list of grouping columns
    """

    return ' AND '.join([" {tbl1}.{i} = {tbl2}.{i} ".format(**locals())
                         for i in grp_list])


def _grp_from_table(tbl, grp_list):
    """
    Helper function for selecting grouping columns of a table
    Args:
            @param tbl        Name of the table
            @param grp_list   The list of grouping columns
    """
    return ' , '.join([" {tbl}.{i} ".format(**locals())
                       for i in grp_list])


def validate_output_and_summary_tables(model_out_table, module_name,
                                       out_table=None):
    """
    Validate a output table, and the associated summary table. The
    assumption here is that, given a model_out_table, there is also a summary
    table named model_out_table+"_summary" created. This function checks for
    the availability of both these tables.
    Optionally, the absence of an 'out_table' can also be checked for, which
    is the table that is to be created.
    Args:
        @param model_out_table
        @param module_name
        @param out_table (optional)

    Results:
        Throws an error if either model_out_table or model_out_table_"_summary"
        is not present. It also throws an error out_table (if specified)
        is already present.
    """
    _assert(model_out_table and model_out_table.strip().lower() not in ('null', ''),
            "Graph {0}: Invalid {0} table name.".format(module_name))
    _assert(table_exists(model_out_table),
            "Graph {0}: {0} table ({1}) is missing.".format(module_name, model_out_table))
    _assert(not table_is_empty(model_out_table),
            "Graph {0}: {0} table ({1}) is empty.".format(module_name, model_out_table))

    summary = add_postfix(model_out_table, "_summary")
    _assert(table_exists(summary),
            "Graph {0}: {0} summary table ({1}) is missing.".format(module_name, summary))
    _assert(not table_is_empty(summary),
            "Graph {0}: {0} summary table ({1}) is empty.".format(module_name, summary))

    if out_table:
        _assert(not table_exists(out_table),
                "Graph WCC: Output table {0} already exists.".format(out_table))


def validate_graph_coding(vertex_table, vertex_id, edge_table, edge_params,
                          out_table, func_name, **kwargs):
    """
    Validates graph tables (vertex and edge) as well as the output table.
    """
    _assert(out_table and out_table.strip().lower() not in ('null', ''),
            "Graph {func_name}: Invalid output table name!".format(**locals()))
    _assert(not table_exists(out_table),
            "Graph {func_name}: Output table already exists!".format(**locals()))

    _assert(vertex_table and vertex_table.strip().lower() not in ('null', ''),
            "Graph {func_name}: Invalid vertex table name!".format(**locals()))
    _assert(table_exists(vertex_table),
            "Graph {func_name}: Vertex table ({vertex_table}) is missing!".format(
        **locals()))
    _assert(not table_is_empty(vertex_table),
            "Graph {func_name}: Vertex table ({vertex_table}) is empty!".format(
        **locals()))

    _assert(edge_table and edge_table.strip().lower() not in ('null', ''),
            "Graph {func_name}: Invalid edge table name!".format(**locals()))
    _assert(table_exists(edge_table),
            "Graph {func_name}: Edge table ({edge_table}) is missing!".format(
        **locals()))
    _assert(not table_is_empty(edge_table),
            "Graph {func_name}: Edge table ({edge_table}) is empty!".format(
        **locals()))

    existing_cols = set(unquote_ident(i) for i in get_cols(vertex_table))
    _assert(vertex_id in existing_cols,
            """Graph {func_name}: The vertex column {vertex_id} is not present in vertex table ({vertex_table}) """.
            format(**locals()))
    _assert(columns_exist_in_table(edge_table, edge_params.values()),
            """Graph {func_name}: Not all columns from {cols} are present in edge table ({edge_table})""".
            format(cols=edge_params.values(), **locals()))

    return None


def get_graph_usage(schema_madlib, func_name, other_text):

    usage = """
    ----------------------------------------------------------------------------
                                USAGE
    ----------------------------------------------------------------------------
     SELECT {schema_madlib}.{func_name}(
        vertex_table  TEXT, -- Name of the table that contains the vertex data.
        vertex_id     TEXT, -- Name of the column containing the vertex ids.
        edge_table    TEXT, -- Name of the table that contains the edge data.
        edge_args     TEXT{comma} -- A comma-delimited string containing multiple
                            -- named arguments of the form "name=value".
        {other_text}
    );

    The following parameters are supported for edge table arguments
    ('edge_args' above):

    src (default = 'src'): Name of the column containing the source
                           vertex ids in the edge table.
    dest (default = 'dest'): Name of the column containing the destination
                            vertex ids in the edge table.
    weight (default = 'weight'): Name of the column containing the weight of
                                 edges in the edge table.
    """.format(schema_madlib=schema_madlib,
               func_name=func_name,
               other_text=other_text,
               comma=',' if other_text is not None else ' ')
    return usage
